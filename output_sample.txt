name,node1,node1_x,node1_y,node1_z_start,node1_z_end,node1_lvl_desc,node2,node2_x,node2_y,node2_z_start,node2_z_end,node2_lvl_desc,value,description,lvl_number,lvl_desc
R4_1,11,0.18,0.1865,-0.1,-0.09,SUBSTRATE,11:F50,0.18,0.1865,-0.1,-0.09,SUBSTRATE,0.001,$l=0 $w=10.0000,224,NW    ITF=SUBSTRATE
R4_2,11,0.18,0.1865,-0.1,-0.09,SUBSTRATE,11:F17,0.12,0.1905,-0.1,-0.09,SUBSTRATE,0.001,$l=0.0601 $w=10.0000,224,NW    ITF=SUBSTRATE



***********************************   mydataset.h
#ifndef MYDATASET_H
#define MYDATASET_H

#include <QObject>
#include <QString>
#include <QStringList>

namespace Ui{
class MyDataSet;
}

class MyDataSet : public QObject
{
    Q_OBJECT

public:
    MyDataSet(QObject *parent = nullptr);
    ~MyDataSet();
    //Ui::MyDataSet *ui;


//public:
//   MyDataSet();

//public slots:
    void file_split(QStringList file_name);

public:

    QString split_datas[100][100];
    QString netlist[100];
    QString pexlist[100];
    QStringList split_data[100][100];

public:
    void loadNetlistData(QString file_path);
};

#endif // MYDATASET_H







***********************************   mydataset.cpp
#include "mydataset.h"
#include "mainwindow.h"
#include <QString>
#include <QTextStream>
#include <QDebug>
#include <QFileDialog>



MyDataSet::MyDataSet(QObject *parent) : QObject(parent)
{
    this->split_datas[0][0] = QString("changyong babo!!");
}

MyDataSet::~MyDataSet()
{
    qDebug() << "===== Exit =====";
}


void MyDataSet::file_split(QStringList file_name)
{

    qDebug() << "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

                                                        // while End
    //qDebug() << split_data[1][1];
}





***********************************   all_data.h


#ifndef ALL_DATA_H
#define ALL_DATA_H

#include <QObject>
#include <QDebug>
#include "formhier.h"
#include "formlayer.h"
#include "formtop.h"
#include "forminfo.h"
#include "formmap.h"
#include <QVector>


class all_data : public QObject
{
    Q_OBJECT
//    Q_DECLARE_METATYPE(QVector <QVector <QString>>);

public:
    all_data(QObject *parent = nullptr);
public:
    QVector <QVector <QString>> inputDataVector;

public slots:
    void receiveSelectFileName(QString file_name);

signals:
    void sendSplitData(int row, int column, const QVector <QVector <QString>> &inputDataVector);


};

#endif // ALL_DATA_H







***********************************   all_data.cpp

#include "all_data.h"
#include "mainwindow.h"
#include <QString>
#include <QTextStream>
#include <QDebug>
#include <QFileDialog>
#include <QVector>


all_data::all_data(QObject *parent) : QObject(parent)
{



}


void all_data::receiveSelectFileName(QString file_name)
{

//    qDebug() << "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
//    qDebug() << file_name;

    int row = 0;
    int column = 0;
    QFile file(file_name);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return;
    QString getLine;
    QStringList list;
    QTextStream fileStream(&file);
    QRegExp rx("[,]");


    while (!fileStream.atEnd()) {
            getLine.append(fileStream.readLine());
            getLine.append(",");
            list << (getLine.split(rx, QString::SkipEmptyParts));
//            for (int column=0;column<17;column++)
//            {
//                split_data[row][column] << list[row][column];
//                //emit sendSplitData(split_data[row][column]);
//                //qDebug() << "row = " << row << split_data[row][column];
//            }
            row++;
//            column = list.count();
            getLine.clear();
    }   // while End

    column = list.count()/row;

    qDebug() << list;


    for(int i=0 ; i<row ; i++)
    {
           QVector <QString> tempvector;
           for(int j=0 ; j<column ; j++)
           {
               int num1;
               num1 = j + column*i;
               tempvector.append(list[num1]);

//               qDebug() << "list " << num1 << list[num1];


           }
           inputDataVector.append(tempvector);
//           qDebug() << "inputDataVector " << inputDataVector;

    }
//    qDebug() << "1st" << inputDataVector.value(0);
    qDebug() << "All" << inputDataVector;
//    qDebug() << "2nd" << inputDataVector.value(1);
//    qDebug() << "3rd" << inputDataVector.value(2);
//    qDebug() << "inputDataVector" << ": " << inputDataVector;

//    QVector <QVector <QVector <int> > > myVector;

//    int massive[4][4] = { {1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16} };

//    QVector <QVector <int> > matrix;

//    for(int i = 0; i < 4; i++)
//    {
//        QVector<int> tempVector;

//        for(int j = 0; j < 4; j++)
//        {
//            tempVector.push_back(massive[i][j]);
//            qDebug() << "Value " << j << ": " << tempVector.value(j);
//        }
//        matrix.push_back(tempVector);
//        qDebug() << "matrix row " << i << ": " << matrix.value(i);
//    }

//    myVector.push_back(matrix);

//    qDebug() << "myVector: " << myVector.value(0);




    emit sendSplitData(row, column, inputDataVector);


}




***********************************   layer_info.txt

LayerName,LayerNum,LayerType,Red,Green,Blue
M1,1,0,1,1,1
M2,2,0,2,1,1
M3,3,0,3,1,1
M4,4,0,4,1,1
M5,5,0,5,1,1
M6,6,0,6,1,1
V1,7,0,1,1,2
V2,8,0,1,1,3
V3,9,0,1,1,4
V4,10,0,1,1,5
V5,11,0,1,1,6
V6,12,0,1,1,7






***********************************   filedb.h
#ifndef FILEDB_H
#define FILEDB_H

#include <QVector>


class FileDb
{
public:
    FileDb();
    QVector<QVector<QVector<QList<float>>>> openFile(QString fileNameInfo);
};

#endif // FILEDB_H









***********************************   filedb.cpp

#include "filedb.h"
#include <QFile>
#include <QVector>
#include <QTextStream>
#include <QList>
#include <QDebug>

FileDb::FileDb()
{

}

QVector<QVector<QVector<QList<float>>>> FileDb::openFile(QString fileNameInfo)
{
    qDebug() << "fileDb.h : " <<fileNameInfo;
    QFile file(fileNameInfo);

    float minX = 0, minY = 0, maxX = 0, maxY =0;
    QVector<QList<float>> strVector;

    if (file.open(QIODevice::ReadOnly) | (QIODevice::Text))
    {
        QTextStream openFile(&file);
        while(!openFile.atEnd())
        {
            auto dataString = openFile.readLine().split(",");
            QList<float> data;
            for (auto &tempdata : dataString)
            {
                 data.append(tempdata.toFloat());
            }
            strVector.append(data);
            qDebug()<< "strVector : " << data;
//            if(minX > data[2].toFloat()){minX = data[2].toFloat();}
//            if(maxX < data[4].toFloat()){maxX = data[4].toFloat();}
//            if(minY > data[3].toFloat()){minY = data[3].toFloat();}
//            if(maxY < data[5].toFloat()){maxY = data[5].toFloat();}
            if(data.size() == 8)
            {
                if(minX > data[2]){minX = data[2];}
                if(maxX < data[4]){maxX = data[4];}
                if(minY > data[3]){minY = data[3];}
                if(maxY < data[5]){maxY = data[5];}
            }
        }
        file.close();
    }
    else
    {
        QVector<QVector<QVector<QList<float>>>> mapFile{{{}}};
        return mapFile;
    }
    int n = (int(maxX*1000)-int(minX*1000))/10 +1;
    int m = (int(maxY*1000)-int(minY*1000))/10 +1;
    qDebug() << "int n / int m : " << n << " , " <<m;

    QVector<QVector<QVector<QList<float>>>> mapFile(n, QVector<QVector<QList<float>>>(m, {{}}));
    mapFile[0][0][0].append({minX, minY, maxX, maxY});

    for (auto & data : strVector)
    {
        if(data.size() == 8)
        {
            qDebug() << " " << data[2] << " "<< int(data[2]*100) << " "<< data[3] << " "<< int(data[3]*100);
            int in_n = 0, in_m = 0;
            if(int(data[2]*100)<0)
            {in_n = n + int(data[2]*100)-1;}
            else
            {in_n = int(data[2]*100)+1;}
            if(int(data[3]*100)<0)
            {in_m = m + int(data[3]*100)-1;}
            else
            {in_m = int(data[3]*100)+1;}
            mapFile[in_n][in_m].append(data);
        }
    }
    return mapFile;

}









